# -*- coding: UTF-8 -*-
import numpy
import json
import os.path
import sys
from sklearn.feature_extraction.text import CountVectorizer # countvectoriser creats tokens for each data set
import numpy.linalg as LA #importing the linear algebra module


dict_probability = {
    '0':{'What is an event?' : 'An event is a set of outcomes of an experiment. Probability is assigned to an event.',

'What is an impossible event?' : 'An event which has 0% chance of happening is an impossible event.',

'What is the probability of an impossible event?' : 'The probability of an impossible event is 0.',

'What is a certain event?' : 'An event which has 100% chance of happening is a certain event.',

'What is the probability of a certain event?' : 'The probability of a certain event is 1.',

'What is probability?' : 'Probability is the extent to which an event is likely to occur.',

'What is the number of trials?' : 'The number of trials is the total number of times the experiment is repeated.',

'What is an outcome?' : 'An outcome is one of the different results possible for a trial of an experiment',

'What is the frequency of an outcome?' : 'The frequency of a particular outcome is the number of times that this outcome is observed in an experiment.',

'What is the relative frequency of an outcome?' : 'The relative frequency of an outcome is the frequency of that outcome expressed as a fraction or percentage of the total number of trials.',

'What is a sample space?' : 'A sample space is the set of all possible outcomes of an experiment. It is also referred to as the universal set.',

'What is a universal set?' : 'A universal set is the set of all possible outcomes of an experiment. It is also referred to as the sample space.',

'What is a list?' : 'A set of outcomes from an event are recorded as a list. For example {Heads, Tails} is the list of outcomes from a coin toss.',

'What is a grid?' : 'If an experiment involves more than one operation, a grid is used.',

'What is a tree diagram?' : 'Tree diagrams are used when more than two operations / events are involved. <Image>',

'What is a table of outcomes?' : 'Tables of outcomes are tables which compare two categorical variables. <Image>',

'What is a venn diagram?' : 'Venn diagram image',

'What is the formula for probability?' : 'Favourable cases / Whole number of cases possible',

'What does "random" mean?' : 'A random number is a number generated by an unpredictable process.',

'Where should I enter my answer?' : 'Please enter your answer in the box provided below the question.',

'Hint' : 'Return hint image based on question id',

'Solution' : 'Return solution image based on question id',

'Help! What can you do? Who are you? What should I write/type?' : "Hi, my name is @prof. Ask me anything. Here are a few options:<br>How should I start a test?<br>I am confused with a test question<br>My test analysis is not clear<br>I'm struggling with a concept",

'Hi Hey Hello Wassup' : "Hey, how are you doing?<br>Let's learn something new today!",}
}


def model(train_dataset,new_data):

    new = [new_data]
    ques_list = list(train_dataset.keys())
    vectorizer, trainVectorizerArray = train_func(ques_list)
    new_test = vectorizer.transform(new).toarray()  # creating a token for the new input data
    cx = lambda a, b: round(numpy.inner(a, b) / (LA.norm(a) * LA.norm(b)), 3)

    for testV in new_test:  # selecting the new token that was created for the input question
        cos = 0.0
        ans = ''
        for n, vector in enumerate(trainVectorizerArray):  # selecting the first token
            cosine = cx(vector, testV)  # finding the cosine similarity between the selected token and the new token

            if cosine > cos:
                cos = cosine

                a = ques_list[n]
                ans = train_dataset[a]
        if ans == '':
            return ('Sorry! I couldn\'t understand that. Please be more specific.')
        else:
            return(ans)

def train_func(train):
    stopWords = ['the', 'is', 'are', 'were', 'a', 'an', 'was', 'has', 'had', 'have','to','do','of','on','my','any','be','by'] #the words that should be ignored by countvectoriser
    vectorizer = CountVectorizer(stop_words=stopWords)  # adding the words list to countvectoriser
    train_set = train # creating the training set
    trainVectorizerArray = vectorizer.fit_transform(train_set).toarray()  # creating tokens froms the trainng set, This is a 2D array
    return vectorizer,trainVectorizerArray

def main_bot(question_id, user_query):                  # question_id - string, user_query
    question_dict = dict_probability[question_id]
    answer = model(question_dict, user_query)
    return (answer)

